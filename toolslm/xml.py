# AUTOGENERATED! DO NOT EDIT! File to edit: ../00_xml.ipynb.

# %% auto 0
__all__ = ['doctype', 'json_to_xml', 'mk_doctype', 'mk_doc', 'docs_xml', 'files2ctx', 'folder2ctx', 'folder2ctx_cli']

# %% ../00_xml.ipynb 3
import hashlib,xml.etree.ElementTree as ET
from collections import namedtuple

from fastcore.utils import *
from fastcore.meta import delegates
from fastcore.xtras import hl_md
from fastcore.xml import to_xml, Document, Documents, Document_content, Source
from fastcore.script import call_parse
try: from IPython import display
except: display=None

# %% ../00_xml.ipynb 4
def json_to_xml(d:dict, # JSON dictionary to convert
                rnm:str # Root name
               )->str:
    "Convert `d` to XML."
    root = ET.Element(rnm)
    def build_xml(data, parent):
        if isinstance(data, dict):
            for key, value in data.items(): build_xml(value, ET.SubElement(parent, key))
        elif isinstance(data, list):
            for item in data: build_xml(item, ET.SubElement(parent, 'item'))
        else: parent.text = str(data)
    build_xml(d, root)
    ET.indent(root)
    return ET.tostring(root, encoding='unicode')

# %% ../00_xml.ipynb 9
doctype = namedtuple('doctype', ['source', 'content'])

# %% ../00_xml.ipynb 11
def _add_nls(s):
    "Add newlines to start and end of `s` if missing"
    if not s: return s
    if s[ 0]!='\n': s = '\n'+s
    if s[-1]!='\n': s = s+'\n'
    return s

# %% ../00_xml.ipynb 13
def mk_doctype(content:str,  # The document content
           source:Optional[str]=None # URL, filename, etc; defaults to `md5(content)` if not provided
          ) -> namedtuple:
    "Create a `doctype` named tuple"
    if source is None: source = hashlib.md5(content.encode()).hexdigest()[:8]
    return doctype(_add_nls(str(source).strip()), _add_nls(content.strip()))

# %% ../00_xml.ipynb 17
def mk_doc(index:int,  # The document index
           content:str,  # The document content
           source:Optional[str]=None # URL, filename, etc; defaults to `md5(content)` if not provided
          ) -> tuple:
    "Create an `ft` format tuple for a single doc in Anthropic's recommended format"
    dt = mk_doctype(content, source)
    content = ft('document_content', dt.content)
    source =  ft('source', dt.source)
    return ft('document', source, content, index=index)

# %% ../00_xml.ipynb 18
def mk_doc(index:int,  # The document index
           content:str,  # The document content
           source:Optional[str]=None # URL, filename, etc; defaults to `md5(content)` if not provided
          ) -> tuple:
    "Create an `ft` format tuple for a single doc in Anthropic's recommended format"
    dt = mk_doctype(content, source)
    content = Document_content(dt.content)
    source = Source(dt.source)
    return Document(source, content, index=index)

# %% ../00_xml.ipynb 22
def docs_xml(docs:list[str],  # The content of each document
             sources:Optional[list]=None,  # URLs, filenames, etc; each one defaults to `md5(content)` if not provided
             prefix:bool=True # Include Anthropic's suggested prose intro?
            )->str:
    "Create an XML string containing `docs` in Anthropic's recommended format"
    pre = 'Here are some documents for you to reference for your task:\n\n' if prefix else ''
    if sources is None: sources = [None]*len(docs)
    docs = (mk_doc(i+1, *o) for i,o in enumerate(zip(docs,sources)))
    return pre + to_xml(Documents(docs))

# %% ../00_xml.ipynb 29
def files2ctx(
    fnames:list[Union[str,Path]], # List of file names to add to context
    prefix:bool=True # Include Anthropic's suggested prose intro?
)->str: # XML for LM context
    fnames = [Path(o) for o in fnames]
    contents = [o.read_text() for o in fnames]
    return docs_xml(contents, fnames, prefix=prefix)

# %% ../00_xml.ipynb 32
@delegates(globtastic)
def folder2ctx(
    folder:Union[str,Path], # Folder name containing files to add to context
    prefix:bool=True, # Include Anthropic's suggested prose intro?
    **kwargs # Passed to `globtastic`
)->str: # XML for Claude context
    fnames = globtastic(folder, **kwargs)
    return files2ctx(fnames, prefix=prefix)

# %% ../00_xml.ipynb 34
@call_parse
@delegates(folder2ctx)
def folder2ctx_cli(
    folder:str, # Folder name containing files to add to context
    **kwargs # Passed to `folder2ctx`
)->str: # XML for Claude context
    return folder2ctx(folder, **kwargs)
