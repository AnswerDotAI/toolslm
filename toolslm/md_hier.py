"""Parse markdown content into a dictionary with hierarchical keys"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../04_md_hier.ipynb.

# %% auto 0
__all__ = ['markdown_to_dict', 'create_heading_dict']

# %% ../04_md_hier.ipynb 2
import re
from fastcore.utils import *

# %% ../04_md_hier.ipynb 3
def markdown_to_dict(
    markdown_content: str # The markdown content to parse
    ) -> dict: # The dictionary with hierarchical keys
    "Convert a markdown document with headings into a hierarchical dictionary with keys based on the heading structure"
    def clean_heading(text): return re.sub(r'[^A-Za-z0-9 ]+', '', text).strip()

    lines = markdown_content.splitlines()
    headings = []
    in_code_block = False

    # Parse headings with their levels and line numbers
    for idx, line in enumerate(lines):
        # Toggle code block state when encountering fence
        if line.strip().startswith('```'): in_code_block = not in_code_block
        
        # Only detect headings when not in a code block
        elif not in_code_block:
            match = re.match(r'^(#{1,6})\s*(.*)', line)
            if match:
                level = len(match.group(1))
                text = match.group(2).strip()
                headings.append({'level': level, 'text': text, 'line': idx})

    # Assign content to each heading, including subheadings
    for i, h in enumerate(headings):
        start = h['line']  # Include the heading line itself
        # Find the end index: next heading of same or higher level
        for j in range(i + 1, len(headings)):
            if headings[j]['level'] <= h['level']:
                end = headings[j]['line']
                break
        else: end = len(lines)
        h['content'] = '\n'.join(lines[start:end]).strip()

    # Build the dictionary with hierarchical keys
    result,stack = {},[]
    first_level = headings[0]['level']
    for h in headings:
        stack = stack[:h['level'] - first_level] + [clean_heading(h['text'])]
        key = '.'.join(stack)
        result[key] = h['content']
    return dict2obj(result)

# %% ../04_md_hier.ipynb 9
def create_heading_dict(
    text: str # The markdown text to convert
    ) -> dict: # The nested dictionary structure
    "Convert markdown headings into a nested dictionary structure"
    lines = text.splitlines()
    headings = []
    in_code_block = False
    
    # Find headings while skipping code blocks
    for line in lines:
        line = line.strip()
        if line.startswith('```'): in_code_block = not in_code_block
        elif not in_code_block and line.startswith('#'):
            level = line.count('#', 0, line.find(' '))  # Count only leading #
            title = line.strip('#').strip()
            headings.append((level, title))
    
    # Build the hierarchical dictionary
    result = {}
    stack = [result]
    prev_level = 0

    for level, title in headings:
        while level <= prev_level:
            stack.pop()
            prev_level -= 1
        new_dict = {}
        stack[-1][title] = new_dict
        stack.append(new_dict)
        prev_level = level
    
    return dict2obj(result)
